{"version":3,"sources":["connect.js","index.js"],"names":["Connect","_this","this","Object","classCallCheck","set","payload","CallTransactionBuilder","IconBuilder","address","params","friend_msg","letter","transaction","nid","IconConverter","toHex","from","to","scoreAddress","stepLimit","timestamp","Date","getTime","version","method","build","console","log","checkTransaction","param","Promise","resolve","timer","setInterval","tx","transactionResult","iconService","getTransactionResult","clearInterval","execute","alert","failure","message","checkTx","requestAddress","reject","listenerTimeout","setTimeout","window","removeEventListener","eventHandler","event","_event$detail","detail","type","clearTimeout","addEventListener","dispatchEvent","CustomEvent","requestJsonRpc","rawTransaction","_event$detail2","jsonrpc","id","HttpProvider","IconService","provider","Index","props","possibleConstructorReturn","getPrototypeOf","call","onClick","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","connect","sent","setState","stop","onChange","e","target","value","onClickSet","_callee2","txHash","res","_context2","objectSpread","state","result","status","react_default","createElement","className","Component","ReactDOM","render","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.73377594.chunk.js","sourcesContent":["\n\nimport IconService, {\n    IconConverter,\n    IconBuilder\n  } from \"icon-sdk-js\";\n\n  \n\n  \nexport default class Connect{\n    constructor() {\n        const { HttpProvider } = IconService;\n\n        //mainnet\n        this.provider = new HttpProvider(\"https://wallet.icon.foundation/api/v3\");\n        this.scoreAddress = \"cx2c10dd97649157729a9c9d5f20d854b74984699e\";\n        this.nid = \"0x1\";\n\n\n        //testnet\n        // this.provider = new HttpProvider(\"https://bicon.net.solidwallet.io/api/v3\");\n        // this.scoreAddress = \"cxd8357c63ad5020db68ce4473ab21fc6b52791fc4\";\n        // this.nid = \"0x3\";\n\n        \n        this.iconService = new IconService(this.provider);\n        \n    }\n    set = payload => {\n        const { CallTransactionBuilder } = IconBuilder;\n        const { address, letter } = payload;\n        let params = {\n          friend_msg:letter\n        };\n        const transaction = new CallTransactionBuilder()\n          .nid(IconConverter.toHex(this.nid))\n          .from(address)\n          .to(this.scoreAddress)\n          .stepLimit(IconConverter.toHex(1000000))\n          .timestamp(IconConverter.toHex(new Date().getTime() * 1000))\n          .version(IconConverter.toHex(3))\n          .method(\"write_letter\")\n          .params(params)\n          .build();\n          console.log(transaction)\n        return transaction;\n      };\n      checkTransaction = param =>\n      new Promise(resolve => {\n        let timer;\n        const checkTx = tx => {\n          const transactionResult = this.iconService.getTransactionResult(tx);\n          if (transactionResult) {\n            clearInterval(timer);\n            resolve(transactionResult.execute());\n          } else {\n            clearInterval(timer);\n            alert(transactionResult.failure.message);\n          }\n        };\n        timer = setInterval(() => {\n          checkTx(param);\n        }, 5000);\n      });\n  \n\n       requestAddress = () => {\n        return new Promise((resolve, reject) => {\n          const listenerTimeout = setTimeout(() => {\n            window.removeEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n            reject(\"timeout\");\n          }, 10000);\n          window.addEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.dispatchEvent(\n            new CustomEvent(\"ICONEX_RELAY_REQUEST\", {\n              detail: {\n                type: \"REQUEST_ADDRESS\"\n              }\n            })\n          );\n          function eventHandler(event) {\n            const { type, payload } = event.detail;\n            if (type === \"RESPONSE_ADDRESS\") {\n              window.removeEventListener(\n                \"ICONEX_RELAY_RESPONSE\",\n                eventHandler,\n                false\n              );\n              clearTimeout(listenerTimeout);\n              resolve(payload);\n            }\n          }\n        });\n      }\n      \n     requestJsonRpc =(rawTransaction)=> {\n        return new Promise(resolve => {\n          window.removeEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.addEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.dispatchEvent(\n            new CustomEvent(\"ICONEX_RELAY_REQUEST\", {\n              detail: {\n                type: \"REQUEST_JSON-RPC\",\n                payload: {\n                  jsonrpc: \"2.0\",\n                  method: \"icx_sendTransaction\",\n                  params: rawTransaction,\n                  id: new Date().getTime()\n                }\n              }\n            })\n          );\n          console.log('afterRequest')\n          function eventHandler(event) {\n            const { type, payload } = event.detail;\n            if (type === \"RESPONSE_JSON-RPC\") {\n              window.removeEventListener(\n                \"ICONEX_RELAY_RESPONSE\",\n                eventHandler,\n                false\n              );\n              resolve(payload);\n            }\n          }\n        });\n      }\n}","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport Connect from './connect';\nimport './index.css'\nexport default class Index extends Component {\n    constructor(props) {\n        super(props)\n      \n        this.state = {\n          address:'',\n          letter:''\n        }\n        this.connect = new Connect()\n      }\n    onClick = async () => {\n        const address = await this.connect.requestAddress();\n        if(address){\n            this.setState({\n                address\n            })\n        }\n    }\n    onChange=(e)=>{\n        this.setState({\n           letter:e.target.value\n        })\n    }\n    onClickSet = async ()=>{\n        const transaction = await this.connect.set({...this.state});\n        const txHash = await this.connect.requestJsonRpc(transaction);\n        const res = await this.connect.checkTransaction(txHash.result);\n        if(res.status ===1 && res.txHash){\n            alert('Success!'+ res.txHash)\n        }\n    }\n\n    render() {\n        return (\n            [\n                <div className='bg'/>,\n                <div className='container'>\n                <h2>Dear My Friend</h2>\n                <p>최고로 친한 친구. 한국어에서는 베프라는 말로 줄여서 쓴다. 다른 말로는 절친, 강원도 방언으로는 아삼육이라고 부르며, 영어에서는 줄여서 BF (BFF(Best Friends Forever)라는 말도 있다. 심리학적으로 친구의 수 보다는 관계의 질이 행복에 영향을 크게 미친다고 합니다.<br></br>\n                    지금 당신이 상상하면서 행복해지는 친구는 누구인가요? 한명? 아니면 여러명?<br></br>\n                    당신과 당신의 친구의 이름과 간단한 메시지를 블록체인에 영원히 남겨 우정을 추억하는 시간이 됐으면 좋겠습니다. 그리고 이용해주신 분들을 위해 작은 이벤트를 준비 했습니다.<br></br>\n                    오픈 카톡방에 들어와 본인의 tx hash, 친구와 함깨 찍은 사진을 공유해주신 선착순 10분에게 10 ICX를 드리겠습니다. 적은 돈이지만 친구와 함깨 바나나우유라도 하나씩 사드세요!!<br></br>\n                    링크: https://open.kakao.com/o/sbxWSxtb</p>\n                <input type='text'onChange={this.onChange} value={this.state.letter}></input>\n                <div><button onClick={this.onClick}>Login</button><button onClick={this.onClickSet}>Send</button></div>\n            </div>\n            ]\n\n        )\n    }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n;\n"],"sourceRoot":""}